// <auto-generated />
using System;
using BeautySalon.Services.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BeautySalon.Services.Migrations
{
    [DbContext(typeof(BeautySalonContext))]
    [Migration("20250225205356_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BeautySalon.Services.Database.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AppointmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CouponId")
                        .HasColumnType("int")
                        .HasColumnName("CouponID");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("Duration");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Status");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("AppointmentId")
                        .HasName("PK__Appointment");

                    b.HasIndex("CouponId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointment", (string)null);
                });

            modelBuilder.Entity("BeautySalon.Services.Database.Coupon", b =>
                {
                    b.Property<int>("CouponId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CouponID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CouponId"));

                    b.Property<string>("CouponCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime");

                    b.HasKey("CouponId")
                        .HasName("PK__Coupon");

                    b.ToTable("Coupon", (string)null);
                });

            modelBuilder.Entity("BeautySalon.Services.Database.EmployeeSchedule", b =>
                {
                    b.Property<int>("EmployeeScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmployeeScheduleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeScheduleId"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.HasKey("EmployeeScheduleId")
                        .HasName("PK__EmployeeSchedule");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeSchedule", (string)null);
                });

            modelBuilder.Entity("BeautySalon.Services.Database.LoyaltyPoints", b =>
                {
                    b.Property<int>("LoyaltyPointsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LoyaltyPointsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoyaltyPointsId"));

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<int>("Points")
                        .HasColumnType("int")
                        .HasColumnName("Points");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("LoyaltyPointsId")
                        .HasName("PK__LoyaltyPoints");

                    b.HasIndex("UserId");

                    b.ToTable("LoyalPoints", (string)null);
                });

            modelBuilder.Entity("BeautySalon.Services.Database.Membership", b =>
                {
                    b.Property<int>("MembershipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MembershipID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MembershipId"));

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Price");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("MembershipId")
                        .HasName("PK__Membership");

                    b.HasIndex("UserId");

                    b.ToTable("Membership", (string)null);
                });

            modelBuilder.Entity("BeautySalon.Services.Database.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PaymentId")
                        .HasName("PK__Payment");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("BeautySalon.Services.Database.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId")
                        .HasName("PK_Role");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("BeautySalon.Services.Database.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("DurationInMinutes")
                        .HasColumnType("bigint")
                        .HasColumnName("DurationInMinutes");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("ServicePackageId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("ServiceId")
                        .HasName("PK__Service");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ServicePackageId");

                    b.ToTable("Service", (string)null);
                });

            modelBuilder.Entity("BeautySalon.Services.Database.ServiceCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CategoryId")
                        .HasName("PK__ServiceCategory");

                    b.ToTable("ServiceCategory", (string)null);
                });

            modelBuilder.Entity("BeautySalon.Services.Database.ServicePackage", b =>
                {
                    b.Property<int>("ServicePackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ServicePackageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServicePackageId"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("ServicePackageId")
                        .HasName("PK__ServicePackage");

                    b.ToTable("ServicePackage", (string)null);
                });

            modelBuilder.Entity("BeautySalon.Services.Database.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId")
                        .HasName("PK__User");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("BeautySalon.Services.Database.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserRoleId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleId"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleId");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.HasKey("UserRoleId")
                        .HasName("PK__UserRole");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("BeautySalon.Services.Database.UserServicePackage", b =>
                {
                    b.Property<int>("UserServicePackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserServicePackageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserServicePackageId"));

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ServicePackageId")
                        .HasColumnType("int")
                        .HasColumnName("ServicePackageID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("UserServicePackageId")
                        .HasName("PK__UserServicePackage");

                    b.HasIndex("ServicePackageId");

                    b.HasIndex("UserId");

                    b.ToTable("UserServicePackage", (string)null);
                });

            modelBuilder.Entity("BeautySalon.Services.Database.UserServiceRating", b =>
                {
                    b.Property<int>("UserServiceRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserServiceRatingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserServiceRatingId"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("Rating");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceId");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.HasKey("UserServiceRatingId")
                        .HasName("PK__UserServiceRating");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("UserServiceRating", (string)null);
                });

            modelBuilder.Entity("BeautySalon.Services.Database.Appointment", b =>
                {
                    b.HasOne("BeautySalon.Services.Database.Coupon", "Coupon")
                        .WithMany("UsedInAppointments")
                        .HasForeignKey("CouponId")
                        .HasConstraintName("FK__Appointment__Coupon");

                    b.HasOne("BeautySalon.Services.Database.User", "Employee")
                        .WithMany("EmployeeAppointments")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK__Appointmet__Employee");

                    b.HasOne("BeautySalon.Services.Database.Payment", "Payment")
                        .WithMany("Appointments")
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("FK__Appointment__Payment");

                    b.HasOne("BeautySalon.Services.Database.Service", "Service")
                        .WithMany("Appointments")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK__Appointmet__Service");

                    b.HasOne("BeautySalon.Services.Database.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Appointmet__User");

                    b.Navigation("Coupon");

                    b.Navigation("Employee");

                    b.Navigation("Payment");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BeautySalon.Services.Database.EmployeeSchedule", b =>
                {
                    b.HasOne("BeautySalon.Services.Database.User", "Employee")
                        .WithMany("EmployeeSchedules")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK__EmployeeSchedule__Employee");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("BeautySalon.Services.Database.LoyaltyPoints", b =>
                {
                    b.HasOne("BeautySalon.Services.Database.User", "User")
                        .WithMany("LoyaltyPoints")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__LoyaltyPoints__User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BeautySalon.Services.Database.Membership", b =>
                {
                    b.HasOne("BeautySalon.Services.Database.User", "User")
                        .WithMany("Memberships")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Membership__User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BeautySalon.Services.Database.Service", b =>
                {
                    b.HasOne("BeautySalon.Services.Database.ServiceCategory", "Category")
                        .WithMany("Services")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK__Service__Category");

                    b.HasOne("BeautySalon.Services.Database.ServicePackage", null)
                        .WithMany("Services")
                        .HasForeignKey("ServicePackageId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BeautySalon.Services.Database.UserRole", b =>
                {
                    b.HasOne("BeautySalon.Services.Database.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRole_Role");

                    b.HasOne("BeautySalon.Services.Database.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRole_User");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BeautySalon.Services.Database.UserServicePackage", b =>
                {
                    b.HasOne("BeautySalon.Services.Database.ServicePackage", "ServicePackage")
                        .WithMany("UserServicePackages")
                        .HasForeignKey("ServicePackageId")
                        .IsRequired()
                        .HasConstraintName("FK_UserServicePackage_ServicePackage");

                    b.HasOne("BeautySalon.Services.Database.User", "User")
                        .WithMany("UserServicePackages")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserServicePackage_User");

                    b.Navigation("ServicePackage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BeautySalon.Services.Database.UserServiceRating", b =>
                {
                    b.HasOne("BeautySalon.Services.Database.Service", "Service")
                        .WithMany("UserServiceRatings")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK_UserServiceRating_Service");

                    b.HasOne("BeautySalon.Services.Database.User", "User")
                        .WithMany("UserServicesRatings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserServiceRating_User");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BeautySalon.Services.Database.Coupon", b =>
                {
                    b.Navigation("UsedInAppointments");
                });

            modelBuilder.Entity("BeautySalon.Services.Database.Payment", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("BeautySalon.Services.Database.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("BeautySalon.Services.Database.Service", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("UserServiceRatings");
                });

            modelBuilder.Entity("BeautySalon.Services.Database.ServiceCategory", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("BeautySalon.Services.Database.ServicePackage", b =>
                {
                    b.Navigation("Services");

                    b.Navigation("UserServicePackages");
                });

            modelBuilder.Entity("BeautySalon.Services.Database.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("EmployeeAppointments");

                    b.Navigation("EmployeeSchedules");

                    b.Navigation("LoyaltyPoints");

                    b.Navigation("Memberships");

                    b.Navigation("UserRoles");

                    b.Navigation("UserServicePackages");

                    b.Navigation("UserServicesRatings");
                });
#pragma warning restore 612, 618
        }
    }
}
